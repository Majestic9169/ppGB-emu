#include "../include/memory.h"
#include <array>
#include <cstdint>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>

uint8_t boot_rom[0x100] = {
    0x31, 0xfe, 0xff, 0xaf, 0x21, 0xff, 0x9f, 0x32, 0xcb, 0x7c, 0x20, 0xfb,
    0x21, 0x26, 0xff, 0x0e, 0x11, 0x3e, 0x80, 0x32, 0xe2, 0x0c, 0x3e, 0xf3,
    0xe2, 0x32, 0x3e, 0x77, 0x77, 0x3e, 0xfc, 0xe0, 0x47, 0x11, 0xa8, 0x00,
    0x21, 0x10, 0x80, 0x1a, 0xcd, 0x95, 0x00, 0xcd, 0x96, 0x00, 0x13, 0x7b,
    0xfe, 0x34, 0x20, 0xf3, 0x11, 0xd8, 0x00, 0x06, 0x08, 0x1a, 0x13, 0x22,
    0x23, 0x05, 0x20, 0xf9, 0x3e, 0x19, 0xea, 0x10, 0x99, 0x21, 0x2f, 0x99,
    0x0e, 0x0c, 0x3d, 0x28, 0x08, 0x32, 0x0d, 0x20, 0xf9, 0x2e, 0x0f, 0x18,
    0xf3, 0x67, 0x3e, 0x64, 0x57, 0xe0, 0x42, 0x3e, 0x91, 0xe0, 0x40, 0x04,
    0x1e, 0x02, 0x0e, 0x0c, 0xf0, 0x44, 0xfe, 0x90, 0x20, 0xfa, 0x0d, 0x20,
    0xf7, 0x1d, 0x20, 0xf2, 0x0e, 0x13, 0x24, 0x7c, 0x1e, 0x83, 0xfe, 0x62,
    0x28, 0x06, 0x1e, 0xc1, 0xfe, 0x64, 0x20, 0x06, 0x7b, 0xe2, 0x0c, 0x3e,
    0x87, 0xe2, 0xf0, 0x42, 0x90, 0xe0, 0x42, 0x15, 0x20, 0xd2, 0x05, 0x20,
    0x4f, 0x16, 0x20, 0x18, 0xcb, 0x4f, 0x06, 0x04, 0xc5, 0xcb, 0x11, 0x17,
    0xc1, 0xcb, 0x11, 0x17, 0x05, 0x20, 0xf5, 0x22, 0x23, 0x22, 0x23, 0xc9,
    0xce, 0xed, 0x66, 0x66, 0x00, 0x07, 0x00, 0x08, 0x00, 0x0f, 0x33, 0x33,
    0x00, 0x0e, 0x76, 0x67, 0xc6, 0x6c, 0x00, 0x07, 0x00, 0x09, 0x00, 0x0b,
    0xdc, 0xcc, 0x6e, 0xe6, 0xcc, 0xc7, 0xdd, 0xd8, 0x99, 0x9f, 0xbb, 0xb3,
    0x33, 0x3e, 0x66, 0x67, 0x66, 0x6c, 0xcc, 0xc7, 0xdc, 0xc8, 0xbf, 0x6c,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xa8, 0x00, 0x11,
    0xa8, 0x00, 0x1a, 0x13, 0xbe, 0x20, 0xfe, 0x23, 0x7d, 0xfe, 0x34, 0x00,
    0x00, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xfb, 0x86, 0x00, 0x00,
    0x3e, 0x01, 0xe0, 0x50};

Memory::Memory(std::ifstream &ROM) {
  load_memory(ROM, 0xFD00);
  for (int i = 0; i < 0x100; i++) {
    MEMORY[i] = boot_rom[i];
  }
  MEMORY[0xFF0F] = 0xe1;
  MEMORY[0xFF41] = 0x80;
  MEMORY[0xFF40] = 0x91;
  MEMORY[0xFF50] = 0xFF;
}

void Memory::print_mem(int n) {
  for (int i = 0; i < n; i++) {
    printf("%5d %2x\n", i, MEMORY[i]);
  }
}

void Memory::load_memory(std::ifstream &ROM, int MEM_END) {
  std::cout << std::hex << std::uppercase << std::setfill('0');
  std::cout << "[*] Loading ROM into memory from 0x0000 to 0x" << std::setw(4)
            << MEM_END << std::endl;
  if (ROM.is_open()) {
    ROM.read((char *)&MEMORY, MEM_END);
    // for (int i = 0x8000; i < 0xFF00; i++) {
    //   MEMORY[i] = 0;
    // }
    std::cout << "[+] Loaded ROM into memory" << std::endl;
  }
  std::cout << std::dec;
}

uint8_t Memory::read_byte(uint16_t addr) { return MEMORY[addr]; }
void Memory::write_byte(uint16_t addr, uint8_t val) { MEMORY[addr] = val; }
