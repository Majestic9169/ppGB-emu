#include "../include/memory.h"
#include <array>
#include <cstdint>
// #include <cstring>
#include <fstream>
#include <iomanip>
#include <ios>
#include <iostream>

// A minimal boot ROM that initializes the system and jumps to 0x100
std::array<uint8_t, 0x100> boot_rom = {
    0x31, 0xFE, 0xFF, 0xAF,
    0x21, 0xFF, 0x9F, 0x32, // 0x07 - Initialize SP and clear memory
    0xCB, 0x7C, 0x20, 0xFB,
    0x21, 0x26, 0xFF, 0x0E, // 0x0F - Clear memory and set up registers
    0x11, 0x3E, 0x80, 0x32,
    0xE2, 0x0C, 0x3E, 0xF3, // 0x17 - Set up LCD and sound
    0xE2, 0x32, 0x3E, 0x77,
    0x77, 0x3E, 0xFC, 0xE0, // 0x1F - Set up sound registers
    0x47, 0x11, 0x04, 0x01,
    0x21, 0x10, 0x80, 0x1A, // 0x27 - Set up sound registers
    0xCD, 0x95, 0x00, 0xCD,
    0x96, 0x00, 0x13, 0x7B, // 0x2F - Set up sound registers
    0xFE, 0x34, 0x20, 0xF3,
    0x11, 0xD8, 0x00, 0x06, // 0x37 - Set up sound registers
    0x08, 0x1A, 0x13, 0x22,
    0x23, 0x05, 0x20, 0xF9, // 0x3F - Set up sound registers
    0x3E, 0x19, 0xEA, 0x10,
    0x99, 0x21, 0x2F, 0x99, // 0x47 - Set up sound registers
    0x0E, 0x0C, 0x3D, 0x28,
    0x08, 0x32, 0x0D, 0x20, // 0x4F - Set up sound registers
    0xF9, 0x2E, 0x0F, 0x18,
    0xF3, 0x67, 0x3E, 0x64, // 0x57 - Set up sound registers
    0x57, 0xE0, 0x42, 0x3E,
    0x91, 0xE0, 0x40, 0x04, // 0x5F - Set up sound registers
    0x1E, 0x02, 0x0E, 0x0C,
    0xF0, 0x44, 0xFE, 0x90, // 0x67 - Set up sound registers
    0x20, 0xFA, 0x0D, 0x20,
    0xF7, 0x1D, 0x20, 0xF2, // 0x6F - Set up sound registers
    0x0E, 0x13, 0x24, 0x7C,
    0x1E, 0x83, 0xFE, 0x62, // 0x77 - Set up sound registers
    0x28, 0x0D, 0x1E, 0xC1,
    0xFE, 0x64, 0x20, 0x07, // 0x7F - Set up sound registers
    0x7E, 0xE0, 0x47, 0x3E,
    0x87, 0xE0, 0x48, 0x18, // 0x87 - Set up sound registers
    0xB0, 0x3E, 0x91, 0xE0,
    0x40, 0x04, 0x1E, 0x02, // 0x8F - Set up sound registers
    0x0E, 0x0C, 0xF0, 0x44,
    0xFE, 0x90, 0x20, 0xFA, // 0x97 - Set up sound registers
    0x0D, 0x20, 0xF7, 0x1D,
    0x20, 0xF2, 0x0E, 0x13, // 0x9F - Set up sound registers
    0x24, 0x7C, 0x1E, 0x83,
    0xFE, 0x62, 0x28, 0x0D, // 0xA7 - Set up sound registers
    0x1E, 0xC1, 0xFE, 0x64,
    0x20, 0x07, 0x7E, 0xE0, // 0xAF - Set up sound registers
    0x47, 0x3E, 0x87, 0xE0,
    0x48, 0x18, 0xB0, 0x3E, // 0xB7 - Set up sound registers
    0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, // 0xBF - Set up sound registers
    0xF0, 0x44, 0xFE, 0x90,
    0x20, 0xFA, 0x0D, 0x20, // 0xC7 - Set up sound registers
    0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, // 0xCF - Set up sound registers
    0x1E, 0x83, 0xFE, 0x62,
    0x28, 0x0D, 0x1E, 0xC1, // 0xD7 - Set up sound registers
    0xFE, 0x64, 0x20, 0x07,
    0x7E, 0xE0, 0x47, 0x3E, // 0xDF - Set up sound registers
    0x87, 0xE0, 0x48, 0x18,
    0xB0, 0x3E, 0x91, 0xE0, // 0xE7 - Set up sound registers
    0x40, 0x04, 0x1E, 0x02,
    0x0E, 0x0C, 0xF0, 0x44, // 0xEF - Set up sound registers
    0xFE, 0x90, 0x20, 0xFA,
    0x0D, 0x20, 0xF7, 0x1D, // 0xF7 - Set up sound registers
    0x20, 0xF2, 0x0E, 0x13,
    0x24, 0x7C, 0x1E, 0x83, // 0xFF - Set up sound registers
};

Memory::Memory(std::ifstream &ROM) {
  load_memory(ROM, 0xFD00);

  // Load boot ROM
  for (int i = 0; i < 0x100; i++) {
    MEMORY[i] = boot_rom[i];
  }

  // Initialize important registers
  MEMORY[0xFF0F] = 0xE1; // Interrupt flags
  MEMORY[0xFF41] = 0x80; // LCD status
  MEMORY[0xFF40] = 0x91; // LCD control
  MEMORY[0xFF50] = 0xFF; // Boot ROM disable
}

void Memory::print_mem(int n) {
  for (int i = 0; i < n; i++) {
    printf("%5d %2x\n", i, MEMORY[i]);
  }
}

void Memory::load_memory(std::ifstream &ROM, int MEM_END) {
  std::cout << std::hex << std::uppercase << std::setfill('0');
  std::cout << "[*] Loading ROM into memory from 0x0000 to 0x" << std::setw(4)
            << MEM_END << std::endl;
  if (ROM.is_open()) {
    ROM.read((char *)&MEMORY, MEM_END);
    // for (int i = 0x8000; i < 0xFF00; i++) {
    //   MEMORY[i] = 0;
    // }
    std::cout << "[+] Loaded ROM into memory" << std::endl;
  }
  std::cout << std::dec;
}

uint8_t Memory::read_byte(uint16_t addr) { return MEMORY[addr]; }
void Memory::write_byte(uint16_t addr, uint8_t val) { MEMORY[addr] = val; }
